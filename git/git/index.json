{
    "content": "<p>\ufeffDicas gerais sobre o git.</p>\n<h2 id=\"how-can-i-determine-the-url-that-a-local-git-repo-was-originally-cloned-from\">How can I determine the url that a local git repo was originally cloned from?</h2>\n<p>From <a href=\"http://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repo-was-originally-cloned-from\">How can I determine the url that a local git repo was originally cloned from?</a> :</p>\n<pre><code class=\"Bash\"># If referential integrity has been broken:\ngit config --get remote.origin.url\n# If referential integrity is intact:\ngit remote show origin\n</code></pre>\n\n<h2 id=\"problema-ao-se-fazer-push-para-um-repositorio-non-bare\">Problema ao se fazer push para um reposit\u00f3rio \"non-bare\"</h2>\n<pre><code class=\"Bash\">$ git push\nCounting objects: 20, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (17/17), done.\nWriting objects: 100% (18/18), 2.69 KiB | 0 bytes/s, done.\nTotal 18 (delta 9), reused 0 (delta 0)\nremote: error: refusing to update checked out branch: refs/heads/master\nremote: error: By default, updating the current branch in a non-bare repository\nremote: error: is denied, because it will make the index and work tree inconsistent\nremote: error: with what you pushed, and will require 'git reset --hard' to match\nremote: error: the work tree to HEAD.\nremote: error:\nremote: error: You can set 'receive.denyCurrentBranch' configuration variable to\nremote: error: 'ignore' or 'warn' in the remote repository to allow pushing into\nremote: error: its current branch; however, this is not recommended unless you\nremote: error: arranged to update its work tree to match what you pushed in some\nremote: error: other way.\nremote: error:\nremote: error: To squelch this message and still keep the default behaviour, set\nremote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.\nTo /home/hugo/Dropbox/workplace/eve_grabber\n ! [remote rejected] master -&gt; master (branch is currently checked out)\nerror: failed to push some refs to '/home/hugo/Dropbox/workplace/eve_grabber'\n</code></pre>\n\n<p>Com a ajuda do <a href=\"http://stackoverflow.com/questions/2816369/git-push-error-remote-rejected-master-master-branch-is-currently-checked\">stack overflow</a>:</p>\n<p>At the remote repo:</p>\n<pre><code class=\"Bash\">git config --bool core.bare true\n</code></pre>\n\n<p>Then delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.</p>\n<h2 id=\"gerando-patches\">Gerando Patches</h2>\n<p>Dica do <a href=\"https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/\">How to create and apply a patch with Git</a>:</p>\n<h3 id=\"para-se-gerar-o-patch\">Para se gerar o patch:</h3>\n<pre><code class=\"Bash\">git format-patch against_branch_name --stdout &gt; name_of.patch\n</code></pre>\n\n<p>Outra forma de se gerar o patch \u00e9 com <code>git diff</code>:</p>\n<pre><code class=\"Bash\">git diff sha1..sha2 &gt; name_of.patch\n</code></pre>\n\n<h3 id=\"para-se-aplicar-o-patch\">Para se aplicar o patch:</h3>\n<pre><code class=\"Bash\">git apply --stat name_of.patch\n</code></pre>\n\n<p>Assim, ele s\u00f3 ir\u00e1 mostrar como ser\u00e1 a aplica\u00e7\u00e3o do patch, n\u00e3o aplicar\u00e1 de verdade.</p>\n<p>Para realmente se aplicar o patch devemos chamar</p>\n<pre><code class=\"Bash\">git am name_of.patch\n</code></pre>\n\n<h2 id=\"submodules\">Submodules</h2>\n<p>Atualizando todos os submodules:</p>\n<pre><code class=\"Bash\">git submodule update --init --recursive\n</code></pre>\n\n<h2 id=\"how-to-grep-search-committed-code-in-the-git-history\">How to grep (search) committed code in the git history?</h2>\n<pre><code class=\"Bash\">git grep [regexp] $(git rev-list --all)\n</code></pre>\n\n<h1 id=\"add-only-non-whitespace-changes\">Add only non-whitespace changes</h1>\n<p>Suponha que o seu editor tenha feito mudan\u00e7as nos whitespaces/tabs, para apenas adicionar ao staging as mudan\u00e7as de verdade:</p>\n<pre><code>git diff -w --no-color &lt;arquivo&gt; | git apply --cached --ignore-whitespace\n</code></pre>\n<h1 id=\"temporarily-stop-watching-a-file\">Temporarily stop watching a file</h1>\n<pre><code>git update-index --assume-unchanged &lt;file&gt;\n</code></pre>\n<p>Now the file, even if modified, will not appear in a git status.</p>\n<p>To undo it:</p>\n<pre><code>git update-index --no-assume-unchanged &lt;file&gt;\n</code></pre>\n<p>To list all the files that are \"hidden\" in this way:</p>\n<pre><code>git ls-files -v | grep '^h'\n</code></pre>\n<p>With the help of <a href=\"http://stackoverflow.com/questions/17195861/undo-git-update-index-assume-unchanged-file\">StackOverflow</a></p>\n<h1 id=\"discovering-when-text-was-modified-in-a-file\">Discovering when text was modified in a file</h1>\n<p>With the help of <a href=\"http://stackoverflow.com/questions/12591247/find-when-line-was-deleted\">StackOverflow</a>:</p>\n<pre><code>git log -c -S'missingtext' /path/to/file\n</code></pre>", 
    "url": "/git/git/", 
    "language": "en", 
    "title": "Geral"
}