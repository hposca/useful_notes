{
    "content": "<h1 id=\"analisando-a-historia\">Analisando a hist\u00f3ria</h1>\n<h2 id=\"mudancas-entre-dois-changests\">Mudan\u00e7as entre dois changests</h2>\n<p>Apenas os arquivos que foram mudados:</p>\n<pre><code class=\"Bash\">git diff --name-only sha1..sha2\n# ou\ngit diff --name-only HEAD~10..HEAD~5\n</code></pre>\n\n<p>O conte\u00fado do que foi mudado:</p>\n<pre><code class=\"Bash\">git diff sha1..sha2\n# ou\ngit diff HEAD~10..HEAD~5\n</code></pre>\n\n<h2 id=\"branches-and-commits-between-two-commits\">Branches and commits between two commits</h2>\n<ul>\n<li>\n<p>All commits between two commits (only the direct path)</p>\n<p>git log --ancestry-path <root>..<descendant></p>\n</li>\n<li>\n<p>Current branches that are children of another</p>\n<p>git branch --contains <root branch></p>\n</li>\n</ul>\n<h1 id=\"revert-a-commit-alredy-pushed-to-a-remote-repository\">Revert a commit alredy pushed to a remote repository</h1>\n<p>From <a href=\"http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\">this blog entry</a> there are two good ways:</p>\n<pre><code class=\"Bash\">git push origin +commit_sha^:master\n</code></pre>\n\n<p>or (The one I used):</p>\n<pre><code class=\"Bash\">git reset HEAD^ --hard\ngit push origin -f\n</code></pre>\n\n<h1 id=\"making-git-forget-about-a-file-that-was-tracked-but-is-now-in-gitignore\">Making git \u201cforget\u201d about a file that was tracked but is now in .gitignore</h1>\n<p>.gitignore will prevent untracked files from being added (without an add -f) to the set of files tracked by git, however git will continue to track any files that are already being tracked.</p>\n<p>To stop tracking a file you need to remove it from the index. This can be achieved with this command.</p>\n<pre><code class=\"Bash\">git rm --cached &lt;file&gt;\n</code></pre>\n\n<p>The removal of the file from the head revision will happen on the next commit.</p>\n<h1 id=\"edit-an-incorrect-commit-message-in-git\">Edit an incorrect commit message in Git</h1>\n<p>With hints from <a href=\"http://stackoverflow.com/questions/179123/edit-an-incorrect-commit-message-in-git\">StackOverflow</a>:</p>\n<ol>\n<li>\n<p>If the commit you want to fix isn\u2019t the most recent one:</p>\n<p>If you want to fix several flawed commits, pass the parent of the oldest one of them.\n<code>git rebase --interactive $parent_of_flawed_commit</code></p>\n</li>\n<li>\n<p>An editor will come up, with a list of all commits since the one you gave.</p>\n<ol>\n<li>Change <code>pick</code> to <code>reword</code> (or on old versions of Git, to <em>edit</em>) in front of any commits you want to fix.</li>\n<li>Once you save, Git will replay the listed commits.</li>\n</ol>\n</li>\n<li>\n<p>For each commit you want to <code>reword</code>, Git will drop you back into your editor. For each commit you want to edit, Git drops you into the shell. If you\u2019re in the shell:</p>\n<ol>\n<li>Change the commit in any way you like.</li>\n<li><code>git commit --amend</code></li>\n<li><code>git rebase --continue</code></li>\n</ol>\n</li>\n</ol>\n<p>Most of this sequence will be explained to you by the output of the various commands as you go. It\u2019s very easy, you don\u2019t need to memorise it \u2013 just remember that <code>git rebase --interactive</code> lets you correct commits no matter how long ago they were.</p>", 
    "url": "/git/history/", 
    "language": "en", 
    "title": "History"
}