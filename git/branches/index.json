{
    "content": "<p>Dicas de como se utilizar branches no git.</p>\n<h2 id=\"showing-which-files-have-changed-between-git-branches\">Showing which files have changed between git branches</h2>\n<p>From <a href=\"http://stackoverflow.com/questions/822811/showing-which-files-have-changed-between-git-branches\">Showing which files have changed between git branches</a> :</p>\n<pre><code class=\"Bash\">git diff --name-status master..branchName\n</code></pre>\n\n<h2 id=\"git-rename-local-git-branch\">Git rename local git branch</h2>\n<p>From <a href=\"http://stackoverflow.com/questions/6591213/rename-local-git-branch\">Git rename local git branch</a> :</p>\n<pre><code class=\"Bash\">git branch -m &lt;oldname&gt; &lt;newname&gt;\n# or, if you want to rename the current branch:\ngit branch -m &lt;newname&gt;\n</code></pre>\n\n<h2 id=\"pushing-local-branch-to-origin\">Pushing local branch to origin</h2>\n<pre><code class=\"Bash\">git push origin &lt;branchName&gt;\n</code></pre>\n\n<h2 id=\"remove-remote-branches\">Remove remote branches</h2>\n<p>From <a href=\"http://stackoverflow.com/questions/2003505/delete-a-git-branch-both-locally-and-remotely\">Remove remote branches</a> :</p>\n<pre><code class=\"Bash\">git push origin --delete &lt;branchName&gt; # or\ngit push origin :&lt;branchName&gt;\n</code></pre>\n\n<h1 id=\"visualization\">Visualization</h1>\n<h2 id=\"branches-hierarchy\">Branches Hierarchy</h2>\n<pre><code class=\"Bash\">git log --oneline --decorate --color --graph --all --simplify-by-decoration\n# ou\ngit log --graph --simplify-by-decoration --pretty=format:'%d' --all\n</code></pre>\n\n<h2 id=\"git-log-all-branches\">Git log all branches</h2>\n<p>From <a href=\"http://www.lornajane.net/posts/2014/git-log-all-branches\">Git log all branches</a> :</p>\n<pre><code class=\"Bash\">git log --oneline --graph --decorate --all\n</code></pre>\n\n<h1 id=\"moving\">Moving</h1>\n<h2 id=\"move-commits-from-one-branch-to-another\">Move commits from one branch to another</h2>\n<p>From <a href=\"http://effectif.com/git/move-commit-from-one-branch-to-another\">Move commits from one branch to another</a> :</p>\n<pre><code class=\"Bash\"># This will move commits from master to the new branch\ngit checkout -b some-feature\ngit checkout master\ngit reset --hard HEAD^\ngit checkout some-feature\n</code></pre>\n\n<h2 id=\"movendo-conteudo-de-uma-branch-para-outra\">Movendo conte\u00fado de uma branch para outra</h2>\n<p>De vez em quando n\u00e3o podemos simplesmente mergear uma branch com a outra, pois isso pode trazer algumas modifica\u00e7\u00f5es indesejadas.\nUma coisa que podemos fazer \u00e9 crirar um conjunto de patches e transport\u00e1-los para a branch onde queremos aplicar as mudan\u00e7as que foram feitas na outra branch.</p>\n<p><strong>Gerando os patches:</strong></p>\n<pre><code class=\"Bash\">git checkout &lt;SHA-1 do commit que voc\u00ea quer considerar como \u00faltimo&gt;\ngit format-patch &lt;SHA-1 do commit que voc\u00ea quer utilizar como primeiro&gt;\n# Ser\u00e3o gerados v\u00e1rios arquivos .patch\n</code></pre>\n\n<p><strong>Aplicando os patches:</strong></p>\n<pre><code class=\"Bash\"># Primeiramente, mude seu workspace para a branch onde voc\u00ea quer aplicar as mudan\u00e7as\n# e.g.: git checkout production\n\ngit am *.patch\n# No caso que enfrentei tinha alguns problemas de espa\u00e7o, final de linha, etc. ent\u00e3o utilizei:\ngit am -3 --ignore-whitespace *.patch\n</code></pre>\n\n<p>Caso algum dos patches falhe na sua aplica\u00e7\u00e3o basta editar o arquivo, adicion\u00e1-lo com <code>git add</code> e dar um <code>git am --continue</code></p>\n<h2 id=\"move-the-most-recent-commit\">Move the most recent commit</h2>\n<p>From <a href=\"http://stackoverflow.com/questions/1628563/move-the-most-recent-commits-to-a-new-branch-with-git\">Move the most recent commit(s) to a new branch with Git</a> :</p>\n<pre><code class=\"Bash\">git branch newbranch\ngit reset --hard HEAD~3 # Go back 3 commits. You *will* lose uncommitted work.\ngit checkout newbranch\n</code></pre>\n\n<h2 id=\"movendo-um-diretorio-de-um-repositorio-para-outro-preservando-o-historico\">Movendo um diret\u00f3rio de um reposit\u00f3rio para outro, preservando o hist\u00f3rico!</h2>\n<p>Quem nunca come\u00e7ou a mexer em um diret\u00f3rio e depois percebeu que ele precisava ficar em outro reposit\u00f3rio, ou at\u00e9 ser um reposit\u00f3rio separado (uma biblioteca, por exemplo)? Seus problemas se acabaram-se!! <code>git filter-branch</code> ao resgate!</p>\n<p>Para esta receita de bolo queremos:</p>\n<ul>\n<li>Mover um diret\u00f3rio de um reposit\u00f3rio A para um reposit\u00f3rio B</li>\n</ul>\n<p>E temos as seguintes condi\u00e7\u00f5es:</p>\n<ul>\n<li>O reposit\u00f3rio A cont\u00e9m outras coisas al\u00e9m do diret\u00f3rio que queremos mover</li>\n<li>Queremos preservar todo o hist\u00f3rico de commits que envolvam o diret\u00f3rio em quest\u00e3o</li>\n</ul>\n<p>(depois de fazer um backup do seu reposit\u00f3rio, utilizando sua forma favorita)</p>\n<p>Na raiz do \"reposit\u00f3rio A\":</p>\n<pre><code class=\"Bash\">git filter-branch --subdirectory-filter [oDitoCujoDoDiretorioQueQueremosSeparar] -- --all\n</code></pre>\n\n<p>Este lindo comando far\u00e1, segundo a documenta\u00e7\u00e3o, como se o reposit\u00f3rio fosse a ra\u00edz do reposit\u00f3rio e todo o resto, desconhecido.</p>\n<p>J\u00e1 no seu \"reposit\u00f3rio B\":</p>\n<pre><code class=\"Bash\">git checkout -b new_branch\ngit remote add branchA [caminhoParaORepositorioA]\ngit pull branchA master # Ao inv\u00e9s de master voc\u00ea pode colocar a branch que estava sendo utilizada no reposit\u00f3rio A\ngit remote rm branchA\ngit checkout master\ngit merge --no-ff new_branch\ngit branch -d new_branch\n</code></pre>\n\n<p>Pronto! Agora em seu \"reposit\u00f3rio B\" voc\u00ea ter\u00e1 todo o conte\u00fado do diret\u00f3rio que estava no \"reposit\u00f3rio A\", e com o hist\u00f3rico preservado!\nE isto tudo s\u00f3 foi poss\u00edvel devido \u00e0s dicas <a href=\"http://www.google.com/url?q=http%3A%2F%2Fgbayer.com%2Fdevelopment%2Fmoving-files-from-one-git-repository-to-another-preserving-history%2F&amp;sa=D&amp;sntz=1&amp;usg=AFrqEzd245648I-fl6TPK2YXtsyvjdMGLw\">deste site</a>!</p>\n<h1 id=\"how-do-you-squash-commits-into-one-patch-with-git-format-patch\">How do you squash commits into one patch with git format-patch?</h1>\n<p>With the help of <a href=\"http://stackoverflow.com/questions/616556/how-do-you-squash-commits-into-one-patch-with-git-format-patch\">StackOverflow</a>.</p>\n<pre><code class=\"Bash\">[(master)]$ git checkout -b tmpsquash\nSwitched to a new branch &quot;tmpsquash&quot;\n\n[(tmpsquash)]$ git merge --squash newlines\nUpdating 4d2de39..b6768b2\nFast forward\nSquash commit -- not updating HEAD\n test.txt |    2 ++\n 1 files changed, 2 insertions(+), 0 deletions(-)\n\n[(tmpsquash)]$ git commit -a -m &quot;My squashed commits&quot;\n[tmpsquash]: created 75b0a89: &quot;My squashed commits&quot;\n 1 files changed, 2 insertions(+), 0 deletions(-)\n\n[(tmpsquash)]$ git format-patch master\n0001-My-squashed-commits.patch\n</code></pre>\n\n<h1 id=\"moving-branch-pointer-without-checkout\">Moving branch pointer without checkout</h1>\n<p>As stated <a href=\"http://stackoverflow.com/questions/5471174/git-move-branch-pointer-to-different-commit-without-checkout\">here</a> we can use:</p>\n<pre><code>git branch -f branch-name new-tip-commit\n</code></pre>", 
    "url": "/git/branches/", 
    "language": "en", 
    "title": "Branches"
}